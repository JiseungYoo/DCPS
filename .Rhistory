reduce(str_c, sep = ";")
return(result)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = custom_paste(core_title), # write function with no duplication or extra separators
supp_titles = custom_paste(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
custom_paste <- function(...) {
vectors <- c(...)
# Remove NA and empty strings
vectors <- vectors %>%
replace_na("") %>%
discard(~ .x == "")
# If all elements are NA or empty, return NA
if(length(vectors) == 0) {
return(NA_character_)
}
# Remove duplicates but keep one instance
vectors <- vectors %>%
unique()
# Concatenate the strings with the specified separator
result <- vectors %>%
reduce(str_c, sep = ";")
return(result)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = custom_paste(core_title), # write function with no duplication or extra separators
supp_titles = custom_paste(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
custom_paste <- function(vectors) {
# Apply the function to each element of the vector
result <- purrr::map_chr(vectors, function(x) {
# Split the string into separate words
words <- str_split(x, ";")[[1]]
# Remove NA and empty strings
words <- words %>%
replace_na("") %>%
discard(~ .x == "")
# If all elements are NA or empty, return NA
if(length(words) == 0) {
return(NA_character_)
}
# Remove duplicates but keep one instance
words <- words %>%
unique()
# Concatenate the strings with the specified separator
result <- words %>%
reduce(str_c, sep = ";")
return(result)
})
return(result)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = custom_paste(core_title), # write function with no duplication or extra separators
supp_titles = custom_paste(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = map_chr(core_title, custom_paste),
supp_titles = map_chr(supp_title, custom_paste)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = paste(core_title, collapse = ""), # write function with no duplication or extra separators
supp_titles = paste(supp_title, collapse = "")) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
# Collapse into a single string
paste(x, collapse = sep)
collapse_unique <- function(x, sep = ";") {
# Remove NA or empty values
x <- x[!is.na(x) & x != ""]
# If all values are removed, return NA
if(length(x) == 0) {
return(NA)
}
# Remove duplicates
x <- unique(x)
# Collapse into a single string
paste(x, collapse = sep)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
collapse_unique <- function(x, sep = "; ") {
# Remove NA or empty values
x <- x[!is.na(x) & x != ""]
# If all values are removed, return NA
if(length(x) == 0) {
return(NA)
}
# Remove duplicates
x <- unique(x)
# Collapse into a single string
paste(x, collapse = sep)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
collapse_unique <- function(x, sep = "; ") {
# Remove NA or empty values
x <- x[!is.na(x) & x != ""]
# If all values are removed, return NA
if(length(x) == 0) {
return(NA)
}
# Remove duplicates
x <- unique(x)
# Collapse into a single string
paste(x, collapse = sep)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(is.na(core_titles), weight - 1,   weight))
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(
core_titles = ifelse(core_titles == "", NA, core_titles),
supp_titles = ifelse(supp_titles == "", NA, supp_titles),
weight = ifelse(!is.na(core_titles), weight - 1,   weight))
english_courses.student_year %>%
ggplot(aes(weight)) +
geom_histogram() +
facet_grid(rows = vars(Grade), cols = vars(year))
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(weight = ifelse(!is.na(core_titles), weight - 1,   weight))
english_courses.student_year %>%
ggplot(aes(weight)) +
geom_histogram() +
facet_grid(rows = vars(Grade), cols = vars(year))
View(df)
collapse_unique <- function(x, sep = "; ") {
x <- x[!is.na(x) & x != ""]
if(length(x) == 0) return(NA)
x <- unique(x)
paste(x, collapse = sep)
}
collapse_unique <- function(x, sep = "; ") {
x <- x[!is.na(x) & x != ""]
if(length(x) == 0) return(NA)
x <- unique(x)
paste(x, collapse = sep)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(weight = ifelse(!is.na(core_titles), weight - 1,   weight))
english_courses.student_year %>%
ggplot(aes(weight)) +
geom_histogram() +
facet_grid(rows = vars(Grade), cols = vars(year))
#
# Purpose of script:
#
# Author: Max Anthenelli
#
# Date Created: 2024-02-17
#  This code is free for anyone to use
# Email: anthenem@gmail.com
#
## set working directory ----
working_directory <- file.path("C:", "Users", "Max", "Documents", "GitHub",
"DCPS")
box_directory <- file.path(working_directory, "..", "..", "..",
"Box", "DCPS-SERP Data Internal 2019")
setwd(working_directory)
getwd()
#getwd()
## choose required packages ----
c("tidyverse", "magrittr", "rlang", "glue",
"haven", "labelled", "writexl",
"gt", "gtsummary", "webshot2", 'readxl',
"scales", "grid", "ggtext", "patchwork"
)  |>
purrr::walk(~require(.x, character.only = TRUE))
## Load Data ----
excel_file <- file.path( box_directory, "Data", "Raw",
"Student Data through SY22-23 Updated.xlsx")
courses_student.school.year <-
map(map_vec(c(19:22), ~glue("Courses SY{.x}-{.x+1}")),
~excel_file %>% read_excel(sheet = .x)) %>%
list_rbind() %>%
rename(year = courses_sy_start) %>%
mutate(Grade = ifelse(str_trim(Grade) == "K", "0", Grade) %>% parse_double())
# restricting data to only look at student's main school
df <-
read_excel(excel_file, sheet = "Enrollment and Attendance") %>%
group_by(StudentID, SchoolYearStart) %>%
filter(Membership_Days==max(Membership_Days)) %>%
reframe(Grade = min(ifelse(str_trim(Grade) == "K", "0", Grade) %>% parse_double(), na.rm = TRUE),
school_id = min(School_ID, na.rm = TRUE),
s_days_enrolled = max(Membership_Days)) %>%
rename(year = SchoolYearStart) %>%
inner_join(courses_student.school.year,
join_by(StudentID, Grade, year, school_id == School),
relationship = "one-to-many")
df %>%
filter(Grade == 8) %>%
count(StudentID) %>%
# count(n) %>% view()
ggplot(aes(n)) +
geom_histogram()
english_course_titles <- c(glue("English {6:8}"), glue("Advanced English {6:8}"),
glue("Pre-AP English {6:8}"), glue("English FT {6:8}"), glue("English & Humanities {6:8}"),
"English I", "Language, Culture and Literacy", glue("Language Arts {6:8}"),
"English as a Second Language I", "English as a Second Language II",
"IB MYP English II") # does Journalism count??
# here's a cool way to exploit title symmetry, but maybe unhelpful here
crossing(types = c("Resource", "Workshop", "Foundations", "Support"),
grades = c(6:8, "MS")) %>%
glue_data("Reading {types} {grades}")
# repeat the same procedure of filtering out courses narrowing down list of either
# irrelevant or undocumented supplemental courses
supplemental_english_titles <- c(
glue("Reading Resource MS{6:8}"),
glue("Reading Workshop {c(6:8, 'MS')}"),
"Reading Support MS",
"Newc Engl Lit Devt MS", "Newc Oral LangDevt MS",
"Beginning ESL MS", "Intermed ESL MS", "Advanced ESL MS",
"Extended Literacy MS",
"Reading Lab", "LL: Miixed-Model Reading MS7",
glue("LL: Mixed-Model Reading MS{6:8}"),
glue("AVID Grade {6:8}") # this isn't specifically literacy but I found their website
)
english_takers  <-
df %>%
filter(Grade %in% 6:8, Title %in% english_course_titles) %$%
unique(StudentID)
unrelated_subject_codes <-
c("ADM", "ART", "CARR", "CTE", "EE", "FL", "MAT", "MU", "NULL", NULL, "PE",
"SCI", "SS", "WL")
# check to see if core courses overlap (they don't)
students_with_double_core <-
df %>%
filter(Grade %in% 6:8, !Subject_Code %in% unrelated_subject_codes, Title %in% english_course_titles,
Term_Code %in% c("FY", "FYCB")) %>%
group_by(StudentID, year) %>%
count(Title, Term_Code, Subject_Code,  sort = TRUE) %>%
count(n) %>%
filter(nn>1) %$%
unique(StudentID)
df %>%
filter(StudentID %in% students_with_double_core, Title %in% english_course_titles) %>%
group_by(StudentID, year) %>%
add_count(StudentID) %>%
filter(!n==1) %>%
reframe(Title = paste(Title, collapse = " "),
Subject_Code = paste(Subject_Code, collapse = " "))
df %>%
filter(Title %in% english_course_titles) %>%
count(Term_Code, sort = TRUE)
df %>%
filter(Grade %in% 6:8, !Subject_Code %in% unrelated_subject_codes,
Title %in% supplemental_english_titles) %>%
count(Title, Subject_Code,  sort = TRUE) %>%
view()
# check to see if core courses overlap (they don't)
students_with_double_core <-
df %>%
filter(Grade %in% 6:8, !Subject_Code %in% unrelated_subject_codes, Title %in% english_course_titles,
Term_Code %in% c("FY", "FYCB")) %>%
group_by(StudentID, year) %>%
count(Title, Term_Code, Subject_Code,  sort = TRUE) %>%
count(n) %>%
filter(nn>1) %$%
unique(StudentID)
df %>%
filter(StudentID %in% students_with_double_core, Title %in% english_course_titles) %>%
group_by(StudentID, year) %>%
add_count(StudentID) %>%
filter(!n==1) %>%
reframe(Title = paste(Title, collapse = " "),
Subject_Code = paste(Subject_Code, collapse = " "))
df %>%
filter(!Title %in% c(english_course_titles, supplemental_english_titles),
!Subject_Code %in% unrelated_subject_codes, Grade %in% 6:8) %>%
count(Title, Subject_Code, Term_Code, sort = TRUE) %>%
view()
if(length(x) == 0) return(NA)
x <- unique(x)
collapse_unique <- function(x, sep = "; ") {
x <- x[!is.na(x) & x != ""]
if(length(x) == 0) return(NA)
x <- unique(x)
paste(x, collapse = sep)
}
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB", "FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(weight = ifelse(!is.na(core_titles), weight - 1,   weight))
english_courses.student_year %>%
ggplot(aes(weight)) +
geom_histogram() +
facet_grid(rows = vars(Grade), cols = vars(year))
supplemental_english_titles
df %>%
filter(Grade %in% 6:8, !StudentID %in% english_8_takers) %>%
group_by(school_id) %>%
count(StudentID) %>% view()
df %>%
filter(Grade %in% 6:8, !StudentID %in% english_takers) %>%
group_by(school_id) %>%
count(StudentID) %>% view()
df %>%
filter(Grade %in% 6:8, !StudentID %in% english_takers) %>%
group_by(school_id) %>%
count(StudentID
df %>%
df %>%
filter(Grade %in% 6:8, !StudentID %in% english_takers) %>%
group_by(school_id) %>%
count(StudentID)
df %>%
filter(Grade %in% 6:8, !Subject_Code %in% unrelated_subject_codes,
Title %in% supplemental_english_titles) %>%
count(Title, Subject_Code,  sort = TRUE) %>%
view()
glue("English {6:8}")
c(glue("English {6:8}"), glue("Advanced English {6:8}"),
glue("Pre-AP English {6:8}"), glue("English FT {6:8}"), glue("English & Humanities {6:8}"),
"English I", "Language, Culture and Literacy", glue("Language Arts {6:8}"),
"English as a Second Language I", "English as a Second Language II",
"IB MYP English II")
crossing(types = c("Resource", "Workshop", "Foundations", "Support"),
grades = c(6:8, "MS")) %>%
glue_data("Reading {types} {grades}")
english_courses.student_year
english_courses.student_year <-
df %>%
filter(Grade %in% 6:8, Title %in% c(english_course_titles, supplemental_english_titles)) %>%
mutate(weight = case_match(Term_Code, c("FY" ,"FYCB") ~ 1,
glue("S{1:2}") ~ .5, glue("T{1:4}")~ .25, .default = NA),
core_title = ifelse(Title %in% english_course_titles, Title, ""),
supp_title = ifelse(Title %in% supplemental_english_titles, Title, "")) %>%
group_by(StudentID, year) %>%
reframe(
Grade = mean(Grade),
weight = sum(weight, na.rm = TRUE),
core_titles = collapse_unique(core_title), # write function with no duplication or extra separators
supp_titles = collapse_unique(supp_title)) %>%
mutate(weight = ifelse(!is.na(core_titles), weight - 1,   weight))
english_courses.student_year %>%
ggplot(aes(weight)) +
geom_histogram() +
facet_grid(rows = vars(Grade), cols = vars(year))
df %>%
filter(Grade %in% 6:8) %$%
unique(Term_Code)
